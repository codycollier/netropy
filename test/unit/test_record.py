#!/usr/bin/env python


import unittest

import record


class TestRecord(unittest.TestCase):

    def setUp(self):
        unittest.TestCase.setUp(self)

        # The test records below are real records from the nist beacon as of 2014 04 05

        self.start_rec_xml = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?><record><version>Version 1.0</version><frequency>60</frequency><timeStamp>1378395540</timeStamp><seedValue>87F49DB997D2EED0B4FDD93BAA4CDFCA49095AF98E54B81F2C39B5C4002EC04B8C9E31FA537E64AC35FA2F038AA80730B054CFCF371AB5584CFB4EFD293280EE</seedValue><previousOutputValue>00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</previousOutputValue><signatureValue>F93BBE5714944F31983AE8187D5D94F87FFEC2F98185F9EB4FE5DB61A9E5119FB0756E9AF4B7112DEBF541E9E53D05346B7358C12FA43A8E0D695BFFAF193B1C3FFC4AE7BCF6651812B6D60190DB8FF23C9364374737F45F1A89F22E1E492B0F373E4DB523274E9D31C86987C64A26F507008828A358B0E166A197D433597480895E9298C60D079673879C3C1AEDA6306C3201991D0A6778B21462BDEBB8D3776CD3D0FA0325AFE99B2D88A7C357E62170320EFB51F9749B5C7B9E7347178AB051BDD097B226664A2D64AF1557BB31540601849F0BE3AAF31D7A25E2B358EEF5A346937ADE34A110722DA8C037F973350B3846DCAB16C9AA125F2027C246FDB3</signatureValue><outputValue>17070B49DBF3BA12BEA427CB6651ECF7860FDC3792268031B77711D63A8610F4CDA551B7FB331103889A62E2CB23C0F85362BBA49B9E0086D1DA0830E4389AB1</outputValue><statusCode>1</statusCode></record>"""
        self.start_rec = {'version': 'Version 1.0',
                          'frequency': 60,
                          'timeStamp': 1378395540,
                          'seedValue': '87F49DB997D2EED0B4FDD93BAA4CDFCA49095AF98E54B81F2C39B5C4002EC04B8C9E31FA537E64AC35FA2F038AA80730B054CFCF371AB5584CFB4EFD293280EE',
                          'previousOutputValue': '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                          'signatureValue': 'F93BBE5714944F31983AE8187D5D94F87FFEC2F98185F9EB4FE5DB61A9E5119FB0756E9AF4B7112DEBF541E9E53D05346B7358C12FA43A8E0D695BFFAF193B1C3FFC4AE7BCF6651812B6D60190DB8FF23C9364374737F45F1A89F22E1E492B0F373E4DB523274E9D31C86987C64A26F507008828A358B0E166A197D433597480895E9298C60D079673879C3C1AEDA6306C3201991D0A6778B21462BDEBB8D3776CD3D0FA0325AFE99B2D88A7C357E62170320EFB51F9749B5C7B9E7347178AB051BDD097B226664A2D64AF1557BB31540601849F0BE3AAF31D7A25E2B358EEF5A346937ADE34A110722DA8C037F973350B3846DCAB16C9AA125F2027C246FDB3',
                          'outputValue': '17070B49DBF3BA12BEA427CB6651ECF7860FDC3792268031B77711D63A8610F4CDA551B7FB331103889A62E2CB23C0F85362BBA49B9E0086D1DA0830E4389AB1',
                          'statusCode': '1'}

        self.rec1_xml = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?><record><version>Version 1.0</version><frequency>60</frequency><timeStamp>1378395720</timeStamp><seedValue>69369B8997F6CA42B0EDBF1F0E7069E6B23DC35A0C0074507C0C4BE1B57E15A54EB9F029925341B07174B278E3E2A2826AD505CF5F93E7F88E9C9EF42C487157</seedValue><previousOutputValue>9318D782191543F8A24C7F69A6BE1F052E71643A5E784EEBF6712FEC0A39DB99B1E80F6871BBD5ECFA2E526D61F8452D068E07F507A8538542B9FEE111239335</previousOutputValue><signatureValue>8753CC3681C0B0F58C570453E6B6CF2580CD69FC6A7AF0579916EF2D7B1EACFF39DED0517D7A8C596C85202E36A972B2EBE91D8EA066C5D042950BF521BADF162C8DE0FCBB50DFE6DD60A8F8F666CD66B3AAEC45045578F9D8F0DC15146B23EE4AD672ACF1AE248F441338B57E84EC4008149E50870557DE3A6C25EB160ED65838228563BC2AF1B78F92925F4E913DE8BA0083BDF4129266E91AC3A6316019C0572BBF8FF70BC032479E162AB3148343E0F79408C48C6EBAB591FDC4F25E0B543D999A4E5599E78B0A8C664D332900E3DDD08ACA125794B7169A688949F1E648E9CC28C04BE4B5030673F9C70F32480F51D2D861B872302130730A33FD862C81</signatureValue><outputValue>0CCBC13B4F2FE93C7EAA1E8ABBC04A595BD685C80FCB815D3F6F760A6D50800FAD050CD463AD7E65E4EC84AABA4CEC4E3DDD682997DEB0B2CD2076ACCF02879A</outputValue><statusCode>0</statusCode></record>"""

        self.rec1 = {'version': 'Version 1.0',
                     'frequency': 60,
                     'timeStamp': 1378395720,
                     'seedValue': '69369B8997F6CA42B0EDBF1F0E7069E6B23DC35A0C0074507C0C4BE1B57E15A54EB9F029925341B07174B278E3E2A2826AD505CF5F93E7F88E9C9EF42C487157',
                     'previousOutputValue': '9318D782191543F8A24C7F69A6BE1F052E71643A5E784EEBF6712FEC0A39DB99B1E80F6871BBD5ECFA2E526D61F8452D068E07F507A8538542B9FEE111239335',
                     'signatureValue': '8753CC3681C0B0F58C570453E6B6CF2580CD69FC6A7AF0579916EF2D7B1EACFF39DED0517D7A8C596C85202E36A972B2EBE91D8EA066C5D042950BF521BADF162C8DE0FCBB50DFE6DD60A8F8F666CD66B3AAEC45045578F9D8F0DC15146B23EE4AD672ACF1AE248F441338B57E84EC4008149E50870557DE3A6C25EB160ED65838228563BC2AF1B78F92925F4E913DE8BA0083BDF4129266E91AC3A6316019C0572BBF8FF70BC032479E162AB3148343E0F79408C48C6EBAB591FDC4F25E0B543D999A4E5599E78B0A8C664D332900E3DDD08ACA125794B7169A688949F1E648E9CC28C04BE4B5030673F9C70F32480F51D2D861B872302130730A33FD862C81',
                     'outputValue': '0CCBC13B4F2FE93C7EAA1E8ABBC04A595BD685C80FCB815D3F6F760A6D50800FAD050CD463AD7E65E4EC84AABA4CEC4E3DDD682997DEB0B2CD2076ACCF02879A',
                     'statusCode': '0'}

        self.rec2_xml = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?><record><version>Version 1.0</version><frequency>60</frequency><timeStamp>1378395780</timeStamp><seedValue>9A6B9C0C355C2A5F48F8C690BCEB36C02BA1CBF6FFEF820E4F8C80CA0CC0A358B6466893D6F1B0E5485098019C60CBD015911EB2BB034CCBD201E49BDD1D0554</seedValue><previousOutputValue>0CCBC13B4F2FE93C7EAA1E8ABBC04A595BD685C80FCB815D3F6F760A6D50800FAD050CD463AD7E65E4EC84AABA4CEC4E3DDD682997DEB0B2CD2076ACCF02879A</previousOutputValue><signatureValue>3DEA4BD2D7E548DD11704C2D69FEDA97933B87A30A77E5059AA696334A6C40616713215283B94057E140DC9EF634A3F258D53D9F72C14C55806B41E5325BF0ABE9911753FA3386F7C77E359087710C3A2AF30CEBB6BC41AA8DCB8E8802F24C8521224B0691C0D43F026A43279046033458E2AB8247D7EDD23DD167392C8DEBFEE8DA72127D7513BF826287871829D7F828375DBA5D7E8D50F420D423B1D5846D3B7C13B5D378F27A3C9A365E986410E0DB636C2552A4A0AD128982F8BC1AE9A1704F0B5FEE5BF071B04D7E936CFA18AA289125A10425712FC79E1917324E49AA123D44539635E7BA587F97A4CD736E53F4EC429BD62E2859C845DE13A40C0B7A</signatureValue><outputValue>1FE09FFB041AE47A77774E2609C30F970D67715E70F5ADD2679EB0F8BA7E442F06391A73A8E48B203F091AA2631E1015F2098060105C81840F704C557A22D8E2</outputValue><statusCode>0</statusCode></record>"""
        self.rec2 = {'version': 'Version 1.0',
                     'frequency': 60,
                     'timeStamp': 1378395780,
                     'seedValue': '9A6B9C0C355C2A5F48F8C690BCEB36C02BA1CBF6FFEF820E4F8C80CA0CC0A358B6466893D6F1B0E5485098019C60CBD015911EB2BB034CCBD201E49BDD1D0554',
                     'previousOutputValue': '0CCBC13B4F2FE93C7EAA1E8ABBC04A595BD685C80FCB815D3F6F760A6D50800FAD050CD463AD7E65E4EC84AABA4CEC4E3DDD682997DEB0B2CD2076ACCF02879A',
                     'signatureValue': '3DEA4BD2D7E548DD11704C2D69FEDA97933B87A30A77E5059AA696334A6C40616713215283B94057E140DC9EF634A3F258D53D9F72C14C55806B41E5325BF0ABE9911753FA3386F7C77E359087710C3A2AF30CEBB6BC41AA8DCB8E8802F24C8521224B0691C0D43F026A43279046033458E2AB8247D7EDD23DD167392C8DEBFEE8DA72127D7513BF826287871829D7F828375DBA5D7E8D50F420D423B1D5846D3B7C13B5D378F27A3C9A365E986410E0DB636C2552A4A0AD128982F8BC1AE9A1704F0B5FEE5BF071B04D7E936CFA18AA289125A10425712FC79E1917324E49AA123D44539635E7BA587F97A4CD736E53F4EC429BD62E2859C845DE13A40C0B7A',
                     'outputValue': '1FE09FFB041AE47A77774E2609C30F970D67715E70F5ADD2679EB0F8BA7E442F06391A73A8E48B203F091AA2631E1015F2098060105C81840F704C557A22D8E2',
                     'statusCode': '0'}

    def tearDown(self):
        unittest.TestCase.tearDown(self)

    def test_verify_record(self):
        for rec in (self.start_rec, self.rec1, self.rec2):
            self.assertTrue(record.verify_record(rec))

    def test_verify_record_pair(self):
        self.assertTrue(record.verify_pair(self.rec1, self.rec2))
        self.assertFalse(record.verify_pair(self.rec2, self.rec1))
        self.assertFalse(record.verify_pair(self.rec1, self.start_rec))

    def test_extract_value(self):
        raw_xml = "<record><color>green</color><number>123</number></record>"
        expected_val = "green"
        val = record._extract_value('color', raw_xml)
        self.assertEqual(val, expected_val)

    def test_extract_value_version(self):
        raw_xml = """<?xml version="1.0" encoding="UTF-8" standalone="yes"?><record><version>Version 1.0</version></record>"""
        expected_val = "Version 1.0"
        val = record._extract_value('version', raw_xml)
        self.assertEqual(val, expected_val)

    def test_parse_record_xml(self):
        rec_xml_pairs = ((self.start_rec, self.start_rec_xml),
                         (self.rec1, self.rec1_xml),
                         (self.rec2, self.rec2_xml))

        for (expected_rec, rec_xml) in rec_xml_pairs:
            rec = record.parse_record_xml(rec_xml)
            self.assertTrue(rec, expected_rec)


if __name__ == "__main__":

    unittest.main()
